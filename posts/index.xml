<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hi! I&#39;m Mohammed Tayeh ðŸ˜„</title>
        <link>https://tayeh.me/posts/</link>
        <description>Recent content in Posts on Hi! I&#39;m Mohammed Tayeh ðŸ˜„</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 07 Dec 2021 18:52:22 +0200</lastBuildDate>
        <atom:link href="https://tayeh.me/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Digitalocean Kubernetes Challenge 2021 - Harbor</title>
            <link>https://tayeh.me/posts/digitalocean-kubernetes-challenge-2021/</link>
            <pubDate>Tue, 07 Dec 2021 18:52:22 +0200</pubDate>
            
            <guid>https://tayeh.me/posts/digitalocean-kubernetes-challenge-2021/</guid>
            <description>Introduction In this is guide i will explain how to create a Kubernetes Cluster on Digitalocean using Terraform, then i will deploy the Harbor on Cluster as a internal container registry
Terraform Files the terraform code used to create the cluster
resource &amp;#34;digitalocean_kubernetes_cluster&amp;#34; &amp;#34;tayeh-cluster&amp;#34; { name = &amp;#34;tayeh-cluster&amp;#34; region = &amp;#34;fra1&amp;#34; version = &amp;#34;1.21.5-do.0&amp;#34; node_pool { name = &amp;#34;worker-pool&amp;#34; size = &amp;#34;s-1vcpu-2gb&amp;#34; node_count = 3 auto_scale = true min_nodes = 3 max_nodes = 4 } } after prepare the Terraform code execute this command to apply it</description>
            <content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>
<p>In this is guide i will explain how to create a Kubernetes Cluster on Digitalocean using Terraform, then i will deploy the Harbor on Cluster as a internal container registry</p>
<h3 id="terraform-files">Terraform Files</h3>
<p>the terraform code used to create the cluster</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-rb" data-lang="rb">resource <span style="color:#e6db74">&#34;digitalocean_kubernetes_cluster&#34;</span> <span style="color:#e6db74">&#34;tayeh-cluster&#34;</span> {
  name   <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;tayeh-cluster&#34;</span>
  region <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;fra1&#34;</span>
  version <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1.21.5-do.0&#34;</span>

  node_pool {
    name       <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;worker-pool&#34;</span>
    size       <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;s-1vcpu-2gb&#34;</span>
    node_count <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
    auto_scale <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
    min_nodes  <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
    max_nodes  <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>
  }
}
</code></pre></div><p>after prepare the Terraform code execute this command to apply it</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">terraform init
export TF_VAR_do_token<span style="color:#f92672">=</span>&lt;do_token&gt;
terraform apply
</code></pre></div><p>now you can download the config on Digitalocean Kubernetes Cluster page, and try to connect to your cluster</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>tayeh@fedora ~<span style="color:#f92672">]</span>$ kubectl --kubeconfig<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;tayeh-cluster-kubeconfig.yaml&#34;</span> get nodes
NAME                STATUS   ROLES    AGE   VERSION
worker-pool-uwtu0   Ready    &lt;none&gt;   25m   v1.21.5
worker-pool-uwtu1   Ready    &lt;none&gt;   25m   v1.21.5
worker-pool-uwtuz   Ready    &lt;none&gt;   25m   v1.21.5
</code></pre></div><h3 id="deploy-harbor-to-cluster">deploy Harbor to Cluster</h3>
<p>first we need to install Helm using this command</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod <span style="color:#ae81ff">700</span> get_helm.sh 
./get_helm.sh
</code></pre></div><p><em>Install <code>ingress-nginx</code> controller</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">helm upgrade --install ingress-nginx ingress-nginx <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --repo https://kubernetes.github.io/ingress-nginx <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --namespace ingress-nginx --create-namespace <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  --kubeconfig<span style="color:#f92672">=</span>tayeh-cluster-kubeconfig.yaml
</code></pre></div><p><em>Get Nginx IP</em></p>
<pre><code>kubectl get svc -n ingress-nginx --kubeconfig=tayeh-cluster-kubeconfig.yaml
</code></pre><blockquote>
<p>point your DNS to the EXTERNAL-IP</p>
</blockquote>
<p><em>harbor</em>
create value file</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">expose</span>:
  <span style="color:#f92672">type</span>: <span style="color:#ae81ff">ingress</span>
  <span style="color:#f92672">tls</span>:
    <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">false</span>
  <span style="color:#f92672">ingress</span>:
    <span style="color:#f92672">hosts</span>:
      <span style="color:#f92672">core</span>: <span style="color:#ae81ff">harbor.tayeh.me</span>
      <span style="color:#f92672">notary</span>: <span style="color:#ae81ff">notary.tayeh.me</span>
<span style="color:#f92672">externalURL</span>: <span style="color:#ae81ff">http://harbor.tayeh.me</span>
<span style="color:#f92672">harborAdminPassword</span>: <span style="color:#e6db74">&#34;P@ssw0rd&#34;</span>
</code></pre></div><p>then <em>Download Chart</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">helm repo add harbor https://helm.goharbor.io
helm install harbor harbor/harbor --values harbor.yml -n harbor --create-namespace --kubeconfig<span style="color:#f92672">=</span>tayeh-cluster-kubeconfig.yaml
kubectl patch ingress/harbor-ingress -p <span style="color:#e6db74">&#39;{&#34;spec&#34;: {&#34;ingressClassName&#34;: &#34;nginx&#34;}}&#39;</span> -n harbor --kubeconfig<span style="color:#f92672">=</span>tayeh-cluster-kubeconfig.yaml
</code></pre></div><p>check containers using</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>tayeh@fedora ~<span style="color:#f92672">]</span>$ kubectl --kubeconfig<span style="color:#f92672">=</span>tayeh-cluster-kubeconfig.yaml get pods -n harbor
NAME                                    READY   STATUS    RESTARTS   AGE
harbor-chartmuseum-7ddd5db67-2c7tf      1/1     Running   <span style="color:#ae81ff">0</span>          4m22s
harbor-core-6487f6cb4d-6qzz9            1/1     Running   <span style="color:#ae81ff">0</span>          4m22s
harbor-database-0                       1/1     Running   <span style="color:#ae81ff">0</span>          4m22s
harbor-jobservice-5f7c6784f4-plrz6      1/1     Running   <span style="color:#ae81ff">0</span>          4m22s
harbor-notary-server-5466b7fc4-w5s8h    1/1     Running   <span style="color:#ae81ff">2</span>          4m22s
harbor-notary-signer-77797d55f6-kx6wh   1/1     Running   <span style="color:#ae81ff">2</span>          4m22s
harbor-portal-7dcf769575-6mjkd          1/1     Running   <span style="color:#ae81ff">0</span>          4m22s
harbor-redis-0                          1/1     Running   <span style="color:#ae81ff">0</span>          4m22s
harbor-registry-7b7f7f547f-xvvmg        2/2     Running   <span style="color:#ae81ff">0</span>          4m22s
harbor-trivy-0                          1/1     Running   <span style="color:#ae81ff">0</span>          4m22s
</code></pre></div><p>and now you can access harbor via hostname <a href="http://harbor.tayeh.me">http://harbor.tayeh.me</a></p>
<blockquote>
<p>teraaform and value files uploaded to <a href="https://github.com/Tayeh/do-kubernetes-challenge">github</a></p>
</blockquote>
<p>and for more about <a href="https://www.digitalocean.com/community/pages/kubernetes-challenge">DigitalOcean Kubernetes Challenge</a></p>
<h4 id="thanks-for-reading">Thanks for reading</h4>
]]></content>
        </item>
        
        <item>
            <title>How to Install PHP 8 on CentOS 7/8 and Fedora</title>
            <link>https://tayeh.me/posts/install_php8_centos/</link>
            <pubDate>Sun, 29 Nov 2020 14:58:01 +0200</pubDate>
            
            <guid>https://tayeh.me/posts/install_php8_centos/</guid>
            <description>Install the EPEL repository  CentOS 8  dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm  CentOS 7  yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm  Fedora 33  dnf install https://rpms.remirepo.net/fedora/remi-release-33.rpm Install the Remi repository  CentOS 8  dnf install https://rpms.remirepo.net/enterprise/remi-release-8.rpm  CentOS 7  yum install https://rpms.remirepo.net/enterprise/remi-release-7.rpm  Fedora 33  dnf config-manager --set-enabled remi Install the yum-utils package  CentOS 8  dnf install yum-utils  CentOS 7  yum install yum-utils Enable the module stream for PHP 8.</description>
            <content type="html"><![CDATA[<h4 id="install-the-epel-repository">Install the EPEL repository</h4>
<ul>
<li>CentOS 8</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
</code></pre></div><ul>
<li>CentOS 7</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
</code></pre></div><ul>
<li>Fedora 33</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dnf install https://rpms.remirepo.net/fedora/remi-release-33.rpm
</code></pre></div><h4 id="install-the-remi-repository">Install the Remi repository</h4>
<ul>
<li>CentOS 8</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dnf install https://rpms.remirepo.net/enterprise/remi-release-8.rpm
</code></pre></div><ul>
<li>CentOS 7</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">yum install https://rpms.remirepo.net/enterprise/remi-release-7.rpm
</code></pre></div><ul>
<li>Fedora 33</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dnf config-manager --set-enabled remi
</code></pre></div><h4 id="install-the-yum-utils-package">Install the yum-utils package</h4>
<ul>
<li>CentOS 8</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dnf install yum-utils
</code></pre></div><ul>
<li>CentOS 7</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">yum install yum-utils
</code></pre></div><h4 id="enable-the-module-stream-for-php-80">Enable the module stream for PHP 8.0:</h4>
<ul>
<li>CentOS 8</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dnf module reset php
dnf module install php:remi-8.0
dnf update
</code></pre></div><ul>
<li>CentOS 7</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">yum-config-manager --disable <span style="color:#e6db74">&#39;remi-php*&#39;</span>
yum-config-manager --enable   remi-php80
yum update
</code></pre></div><ul>
<li>Fedora 33</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dnf module reset php
dnf module install php:remi-8.0
dnf update
</code></pre></div><h4 id="install-php-8">Install PHP 8</h4>
<ul>
<li>CentOS 8</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dnf install php
</code></pre></div><ul>
<li>CentOS 7</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">yum install php
</code></pre></div><ul>
<li>Fedora 33</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dnf install php
</code></pre></div><p>To verify the installed version, use the php command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">php -v
</code></pre></div><h4 id="conclusion">Conclusion</h4>
<p>So thatâ€™s it on how to install PHP 8 on CentOS and RHEL.</p>
<p>if you like this post consider to <strong><a href="/support">support me</a></strong></p>
]]></content>
        </item>
        
        <item>
            <title>How to install the NVIDIA drivers on Fedora 33 with Hybrid Switchable Graphics</title>
            <link>https://tayeh.me/posts/install_the_nvidia_drivers_on_fedora/</link>
            <pubDate>Wed, 25 Nov 2020 09:27:21 +0200</pubDate>
            
            <guid>https://tayeh.me/posts/install_the_nvidia_drivers_on_fedora/</guid>
            <description>This is guide, how to install NVIDIA proprietary drivers on Fedora 33 with Hybrid Switchable Graphics [Intel + Nvidia GeForce]
 Backup important files before you start installation. And this is of course at your own risk, because graphic cards, components and monitors are different and some combinations might cause totally unexpected results.
 identify your Nvidia graphic lspci -vnn | grep VGA the output of the above command will be like:</description>
            <content type="html"><![CDATA[<p>This is guide, how to install NVIDIA proprietary drivers on Fedora 33 with Hybrid Switchable Graphics [Intel + Nvidia GeForce]</p>
<blockquote>
<p>Backup important files before you start installation. And this is of course at your own risk, because graphic cards, components and monitors are different and some combinations might cause totally unexpected results.</p>
</blockquote>
<h3 id="identify-your-nvidia-graphic">identify your Nvidia graphic</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">lspci -vnn | grep VGA
</code></pre></div><p>the output of the above command will be like:</p>
<pre><code>00:02.0 VGA compatible controller [0300]: Intel Corporation UHD Graphics [8086:9bc4] (rev 05) (prog-if 00 [VGA controller])
01:00.0 VGA compatible controller [0300]: NVIDIA Corporation TU116M [GeForce GTX 1660 Ti Mobile] [10de:2191] (rev a1) (prog-if 00 [VGA controller])
</code></pre><h3 id="enable-rpm-fusion">Enable RPM fusion</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-<span style="color:#66d9ef">$(</span>rpm -E %fedora<span style="color:#66d9ef">)</span>.noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-<span style="color:#66d9ef">$(</span>rpm -E %fedora<span style="color:#66d9ef">)</span>.noarch.rpm
</code></pre></div><h3 id="update-your-system">update your system</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo dnf update
</code></pre></div><blockquote>
<p>It is recommended to reboot your system after update</p>
</blockquote>
<h3 id="install-nvidia-driver">install Nvidia driver</h3>
<p><strong>install akmod-nvidia</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo dnf install gcc kernel-headers kernel-devel akmod-nvidia xorg-x11-drv-nvidia xorg-x11-drv-nvidia-libs xorg-x11-drv-nvidia-libs.i686
</code></pre></div><p><strong>install cuda</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo dnf install xorg-x11-drv-nvidia-cuda
</code></pre></div><p><strong>Drivers are installed, run the below command</strong></p>
<p>run <code>sudo akmods --force</code> and <code>sudo dracut --force</code> and then <code>reboot</code>.</p>
<p><strong>and that&rsquo;s it, the switch happens automatically when needed.</strong></p>
<blockquote>
<p>note this guide will disable wayland, X.org only supported.</p>
</blockquote>
<p><strong>to check NVIDIA Processes run the command <code>nvidia-smi</code></strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">nvidia-smi
</code></pre></div><pre><code>Wed Nov 25 09:51:36 2020       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 455.45.01    Driver Version: 455.45.01    CUDA Version: 11.1     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  GeForce GTX 166...  Off  | 00000000:01:00.0 Off |                  N/A |
| N/A   33C    P8     4W /  N/A |      5MiB /  5944MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|    0   N/A  N/A      1776      G   /usr/libexec/Xorg                   4MiB |
+-----------------------------------------------------------------------------+
</code></pre><h4 id="screenshot">screenshot</h4>
<p><img src="/images/nvidia/nvidia_x_server_setting.png" alt="NVIDIA X Server Setting">
<img src="/images/nvidia/nvidia-smi.png" alt="nvidia-smi">
<img src="/images/nvidia/fedora_about.png" alt="fedora_about"></p>
]]></content>
        </item>
        
        <item>
            <title>How to automate a deploy with GitHub actions via SSH</title>
            <link>https://tayeh.me/posts/github_actions_via_ssh/</link>
            <pubDate>Tue, 24 Nov 2020 10:07:01 +0200</pubDate>
            
            <guid>https://tayeh.me/posts/github_actions_via_ssh/</guid>
            <description>Introduction GitHub Actions is an API for cause and effect on GitHub: orchestrate any workflow, based on any event, while GitHub manages the execution, provides rich feedback, and secures every step along the way.
In this article, we will be exploring a hands-on approach to managing your CD processes using GitHub Actions via SSH.
The workflow:
 Connect to VPS via SSH Move to project directory git pull the new changes execute any necessary command  Prerequisites  A GitHub account.</description>
            <content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>
<p>GitHub Actions is an API for cause and effect on GitHub: orchestrate any workflow, based on any event, while GitHub manages the execution, provides rich feedback, and secures every step along the way.</p>
<p>In this article, we will be exploring a hands-on approach to managing your CD processes using GitHub Actions via SSH.</p>
<p>The workflow:</p>
<ol>
<li>Connect to VPS via SSH</li>
<li>Move to project directory</li>
<li><code>git pull</code> the new changes</li>
<li>execute any necessary command</li>
</ol>
<h4 id="prerequisites">Prerequisites</h4>
<ul>
<li>A GitHub account. If you donâ€™t have one, you can sign up here</li>
<li>A server with SSH access</li>
<li>Basic knowledge of writing valid YAML</li>
<li>Basic knowledge of GitHub and Git</li>
</ul>
<h4 id="configuring-workflows">Configuring workflows</h4>
<p>we should create a yml file on <code>.github/workflows/</code>. For example <code>.github/workflows/ci.yml</code>
and add this code to the file:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">name</span>: <span style="color:#ae81ff">CI</span>

<span style="color:#f92672">on</span>: [<span style="color:#ae81ff">push]</span>

<span style="color:#f92672">jobs</span>:
  <span style="color:#f92672">deploy</span>:
    <span style="color:#f92672">if</span>: <span style="color:#ae81ff">github.ref == &#39;refs/heads/master&#39;</span>
    <span style="color:#f92672">runs-on</span>: [<span style="color:#ae81ff">ubuntu-latest]</span>
    <span style="color:#f92672">steps</span>:
      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v1</span>
      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Push to server</span>
        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">appleboy/ssh-action@master</span>
        <span style="color:#f92672">with</span>:
          <span style="color:#f92672">host</span>: <span style="color:#ae81ff">${{ secrets.SERVER_IP }}</span>
          <span style="color:#f92672">username</span>: <span style="color:#ae81ff">${{ secrets.SERVER_USERNAME }}</span>
          <span style="color:#f92672">key</span>: <span style="color:#ae81ff">${{ secrets.KEY }}</span>
          <span style="color:#f92672">passphrase</span>: <span style="color:#ae81ff">${{ secrets.PASSPHRASE }} </span>
          <span style="color:#f92672">script</span>: <span style="color:#ae81ff">cd ${{ secrets.PROJECT_PATH }} &amp;&amp; git pull</span>
</code></pre></div><p>After add this file go to <code>Settings -&gt; Secrets</code> and add secrets <code>SERVER_IP</code>, <code>SERVER_USERNAME</code>, <code>KEY</code>, <code>PASSPHRASE</code>, <code>PROJECT_PATH</code>
<img src="/images/github_actions_ssh_secrets.png" alt="github_actions_ssh_secrets"></p>
<blockquote>
<p>note: you can use <code>password</code> insted of <code>keys</code> just you need to replace the <code>key and passphrase</code> line with <code>password</code> in the workflow file <code>password: ${{ secrets.PASSWORD }}</code> and add the <code>password</code> to secrets</p>
</blockquote>
<blockquote>
<p>I use the GitHub secrets to keep important information hidden</p>
</blockquote>
<blockquote>
<p>also you can add more commands to the script line as you need</p>
</blockquote>
<p><strong>the next time we push to the master branch, it will automatically be deployed to our server.</strong></p>
<p><img src="/images/github_actions_run_job.png" alt="github_actions_run_job"></p>
]]></content>
        </item>
        
        <item>
            <title>Use SSH keys for authentication</title>
            <link>https://tayeh.me/posts/use-ssh-keys/</link>
            <pubDate>Tue, 17 Nov 2020 04:01:59 -1000</pubDate>
            
            <guid>https://tayeh.me/posts/use-ssh-keys/</guid>
            <description>Set up your first SSH keys Use SSH keys for authentication without password when you are connecting to your server. simple and secure login process.
To Generate a new SSH Key [root@server ~]$ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa. Your public key has been saved in /root/.</description>
            <content type="html"><![CDATA[<h2 id="set-up-your-first-ssh-keys">Set up your first SSH keys</h2>
<p>Use SSH keys for authentication without password when you are connecting to your server. simple and secure login process.</p>
<h3 id="to-generate-a-new-ssh-key">To Generate a new SSH Key</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>root@server ~<span style="color:#f92672">]</span>$ ssh-keygen 
Generating public/private rsa key pair.
Enter file in which to save the key <span style="color:#f92672">(</span>/root/.ssh/id_rsa<span style="color:#f92672">)</span>: 
Enter passphrase <span style="color:#f92672">(</span>empty <span style="color:#66d9ef">for</span> no passphrase<span style="color:#f92672">)</span>: 
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:kxPyLTxxqwobFXoOxxxABaDD0xxnZzCB6xxxf38 root@server
The key<span style="color:#960050;background-color:#1e0010">&#39;</span>s randomart image is:
+---<span style="color:#f92672">[</span>RSA 2048<span style="color:#f92672">]</span>----+
|<span style="color:#f92672">=</span>+<span style="color:#f92672">==</span>*            |
|xo.o <span style="color:#f92672">=</span>           |
|+oo.O .          |
|<span style="color:#f92672">=</span>o.* * o         |
|.x. <span style="color:#f92672">=</span> X S        |
| .   O *         |
|    o <span style="color:#f92672">=</span> o        |
|     + qo.x.   P |
|    . .xx+o..o.  |
+----<span style="color:#f92672">[</span>SHA256<span style="color:#f92672">]</span>-----+

</code></pre></div><h3 id="first-way-copy-the-public-key-to-your-server-using-the-command">First way: Copy the public key to your server using the command</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>root@server ~<span style="color:#f92672">]</span>$ ssh-copy-id root@&lt;instance_ip&gt;
/usr/bin/ssh-copy-id: INFO: Source of key<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span> to be installed: <span style="color:#e6db74">&#34;/root/.ssh/id_rsa.pub&#34;</span>
The authenticity of host <span style="color:#e6db74">&#39;&lt;instance_ip&gt; (&lt;instance_ip&gt;)&#39;</span> can<span style="color:#e6db74">&#39;t be established.
</span><span style="color:#e6db74">ECDSA key fingerprint is SHA256:aF/iyxxxKqx1LUyM/uyr/xxxxxxxxxxx.
</span><span style="color:#e6db74">ECDSA key fingerprint is MD5:xx:c3:xx:48:b4:ef:xx:e4:58:a4:xx:14:c1:xx:c5:af.
</span><span style="color:#e6db74">Are you sure you want to continue connecting (yes/no)? yes
</span><span style="color:#e6db74">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
</span><span style="color:#e6db74">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
</span><span style="color:#e6db74">root@&lt;instance_ip&gt;&#39;</span>s password: 

Number of key<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span> added: <span style="color:#ae81ff">1</span>

Now try logging into the machine, with:   <span style="color:#e6db74">&#34;ssh &#39;root@&lt;instance_ip&gt;&#39;&#34;</span>
and check to make sure that only the key<span style="color:#f92672">(</span>s<span style="color:#f92672">)</span> you wanted were added.

</code></pre></div><h3 id="second-way-download-the-public-key-to-your-server-using-the-github-gitlab">Second way: Download the public key to your server using the Github, Gitlab</h3>
<ul>
<li>upload your key to Github or Gitlab: <code>settings -&gt;  SSH keys -&gt; New SSH key</code></li>
<li>after uoload the SSH key you can access key on <a href="https://github.com/tayeh.keys">Github</a>, <a href="https://gitlab.com/tayeh.keys">Gitlab</a></li>
</ul>
<p>now you can import the SSH key using curl command</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>root@server ~<span style="color:#f92672">]</span>$ curl -L https://github.com/tayeh.keys &gt;&gt; ~/.ssh/authorized_keys
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>root@server ~<span style="color:#f92672">]</span>$ curl -L https://github.com/tayeh.keys &gt;&gt; ~/.ssh/authorized_keys
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
<span style="color:#ae81ff">100</span>  <span style="color:#ae81ff">1315</span>  <span style="color:#ae81ff">100</span>  <span style="color:#ae81ff">1315</span>    <span style="color:#ae81ff">0</span>     <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">6015</span>      <span style="color:#ae81ff">0</span> --:--:-- --:--:-- --:--:--  <span style="color:#ae81ff">6032</span>
</code></pre></div><blockquote>
<p>note this way will import all keys on your github account</p>
</blockquote>
<p>now you can access your server without password try:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ssh root@&lt;instance_ip&gt;
</code></pre></div><h3 id="turn-off-password-authentication">Turn off password authentication</h3>
<p>With SSH key authentication, you can disable password authentication for SSH to prevent brute-forcing.
<strong>open SSH configuration file</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">vim /etc/ssh/sshd_config
</code></pre></div><p><strong>search for</strong> <code>PasswordAuthentication</code> and <code>PermitRootLogin</code> change it to:</p>
<pre><code>PasswordAuthentication no
PermitRootLogin without-password
</code></pre><p><strong>Restart the SSH service</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">systemctl restart sshd
</code></pre></div><h3 id="conclusions">Conclusions</h3>
<p>Remember to always keep your private keys safe.</p>
]]></content>
        </item>
        
    </channel>
</rss>
